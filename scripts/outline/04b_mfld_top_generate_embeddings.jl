"""
Using data generated by: scripts/outline/04a_mfld_top_run_simulations.jl
for loads of simulations with different random initial conditions, 
do the pca > isomap embedding to 3 and 10 dimensions. 
Store the results using the supervisor. 
"""


include("settings.jl")


function load(; filters...)
    metadata, data = ProjectSupervisor.fetch(supervisor; filters...)
    
    # stack activations over time
    X = hcat(
        map(
            d -> d["S"][:, 1, 10:end], data
        )...
    )
    @info "Loaded $(length(data)) simulations." X
    return X
end



do_pca(X, params) = Analysis.pca_dimensionality_reduction(X, params)[2]

do_isomap(X, params) = isomap_dimensionality_reduction(X, params)[2]



# -------------------------------- run & save -------------------------------- #
params_3d = AnalysisParameters(
    max_nPC = 50,
    pca_pratio = 0.9999,
    n_isomap_dimensions = 3,
    isomap_k = 10,
    isomap_downsample = 50,  # time downsamplin
)

params_10d = AnalysisParameters(
    max_nPC = 50,
    pca_pratio = 0.9999,
    n_isomap_dimensions = 10,
    isomap_k = 10,
    isomap_downsample = 50,  # time downsamplin
)


can_name = "torus"  


for kernel in values(kernels)
    print(hLine(string(kernel); style="red"))
    filters = Dict{Symbol, Any}(
        :tag => "random_initial_conditions",
        :can => can_name,
        :kernel => string(kernel),
    )
    @info "doing kernel $kernel" filters

    metadata = get_entries(supervisor; filters...)
    reps = unique(metadata[:, "rep"]) |> length
    @info "Found $reps reps for kernel `$kernel` simulations."

    for rep in 1:reps
        print(hLine("$rep/$reps"; style="dim blue"))
        # load data for this rep
        filters[:rep] = rep
        X = load(; filters...) 
        
        # embed in 3 and 10 dimensions
        for (dim, params) in zip(("d3_", "d10_"), (params_3d, params_10d))

            generate_or_load(
                supervisor, 
                "random_initial_conditions",
                "embeddings";
                name = "$(kernel)_$(dim)_rep_$(rep)",
                fmt = "npz",
                metadata = Dict(
                    :can => can_name,
                    :kernel => string(kernel),
                    :rep => rep,
                    :params => Dict(params),
                    :tag  => "ric_embeddings",
                )
            ) do
                M = do_isomap(do_pca(X, params), params)
            end

            # store_data(
            #     supervisor, 
            #     "random_initial_conditions",
            #     "embeddings";
            #     data = M, 
            #     fmt = "npz", 
            #     name = "$(kernel)_$(dim)_rep_$(rep)",
            #     metadata = Dict(
            #         :can => can_name,
            #         :kernel => string(kernel),
            #         :rep => rep,
            #         :params => params,
            #         :tag  => "random_initial_conditions",
            #     )
            # )

            print(hLine(; style="dim"))
        end
    end
end



# # M = @time load(; filters...) |> do_pca |> do_isomap

# plots = []
# camera_angles = (45, 50), (20, 20), (70, 70)
# for camera in camera_angles
#     push!(plots, 
#         scatter3d(
#             M[1, :], M[2, :], M[3, :],
#             msa=0, msw=0, alpha=1,
#             markersize = 10.0,
#             legend = false,
#             # title = "Isomap",
#             # xlabel = "M1", ylabel = "M2", zlabel = "M3",
#             color = :black, 
#             camera = camera,
#             size = (800, 800),
#             showaxis = false,
#             axis=nothing,
#         )
#     )
# end
# fig = plot(plots..., layout=(1, 3), size=(2400, 800))
