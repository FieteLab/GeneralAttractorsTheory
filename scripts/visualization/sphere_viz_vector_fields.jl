using Plots
using LinearAlgebra

import GeneralAttractors.ManifoldUtils: S², fibonacci_sphere, sphere_ψx, sphere_ψy, sphere_ψz
import GeneralAttractors: SphericalDistance
"""
Visulize vector fields on the unit S²⊂ℝ³
generated by rotation around XYZ axes.
"""


scaling = 0.1


X = fibonacci_sphere(600)
metric = SphericalDistance()

p = [1, -1, 0]
p /= norm(p)
# plt = scatter3d(eachrow(X)...; xlim=[-1.1, 1.1], ylim=[-1.1, 1.1], zlim=[-1.1, 1.1], aspect_ratio=:equal)
plt = scatter3d(
    xlim = [-1.1, 1.1],
    ylim = [-1.1, 1.1],
    zlim = [-1.1, 1.1],
    aspect_ratio = :equal,
    size = (800, 800),
)

for x in eachcol(X)
    d = metric(x, p)
    d > 0.2 && continue

    for (col, ψ) in zip((:black, :red, :blue), (sphere_ψx, sphere_ψy, sphere_ψz))
        v = ψ(x) .* scaling
        plot!(
            [x[1], x[1] + v[1]],
            [x[2], x[2] + v[2]],
            [x[3], x[3] + v[3]],
            lw = 4,
            color = col,
            label = nothing,
        )
    end

    v1 = sphere_ψx(x)
    v2 = sphere_ψy(x)
    v3 = sphere_ψz(x)
    @info "dots" v1 ⋅ v2  v2 ⋅ v3  v3⋅v1
    @info "norms" norm(v1) norm(v2) norm(v3)
end
scatter!([p[1]], [p[2]], [p[3]], ms = 10, alpha = 0.5, color = :red, camera = (45, 0))



plt
