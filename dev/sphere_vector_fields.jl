using Plots
using DomainSets
using DomainSets: ×
import ForwardDiff: jacobian
import GLMakie


import GeneralAttractors.ManifoldUtils: ∂x, ∂y, ∂z, ψx, ψy, ψz, sphere_embedding

"""
Visulize vector fields on the unit S²⊂ℝ³
generated by rotation around XYZ axes.
"""


tovec(x) = [[isnan(x) ? 0.0 : x] for x in x]

function sample end
function sample(i::Interval, n = 100)::AbstractVector
    range(leftendpoint(i), rightendpoint(i), length = n) |> collect
end

function sample(d::Rectangle; n = 100)::Vector{Vector}
    Ω = components(d)
    N = n isa Int ? repeat([n], length(Ω)) : n
    [sample(ω, n) for (ω, n) in zip(Ω, N)]
end


domain = (-π .. π) × (-π / 2 .. π / 2)
# domain = (0..π)×(0..2π)


pts = sample(domain; n = (30, 15))
M = hcat([[x, y] for x in pts[1] for y in pts[2]]...)  # 2 × n²

"""
Define and visualize vector fields on the sphere embedded in R3
"""

# ------------------------------------ viz ----------------------------------- #
S = hcat(map(sphere_embedding, eachcol(M))...)  # 3 × n


#? 2D viz
px, py, pz = plot(), plot(), plot()
scatter!(px, M[1, :], M[2, :], ms=3, msa=0, msw=0, grid=false, color=:black, label=nothing, title="X")
scatter!(py, M[1, :], M[2, :], ms=3, msa=0, msw=0, grid=false, color=:red, label=nothing, title="Y")
scatter!(pz, M[1, :], M[2, :], ms=3, msa=0, msw=0, grid=false, color=:green, label=nothing, title="Z")
for i = 1:size(M, 2)
    p = M[:, i]
    point = sphere_embedding(p)
    x, y, z = point

    J = jacobian(sphere_embedding, p)'

    X = 0.15 * J*(z * ∂y - y * ∂z)
    Y = 0.15 * J*(z * ∂x - x * ∂z)
    Z = 0.15 * J*(x * ∂y - y * ∂x)

    plot!(px, [p[1], p[1]+X[1]], [p[2], p[2]+X[2]], lw=2, color="black", label=nothing)
    plot!(py, [p[1], p[1]+Y[1]], [p[2], p[2]+Y[2]], lw=2, color="red", label=nothing)
    plot!(pz, [p[1], p[1]+Z[1]], [p[2], p[2]+Z[2]], lw=2, color="green", label=nothing)

end
plot(px, py, pz, layout=(3, 1), size=(800, 1200), aspect_ratio=:equal, xlim=[-π-0.2, π+0.2], ylim=[-π/2-0.2, π/2+0.2])


#? 3D viz
# fig = GLMakie.scatter(S[1, :], S[2, :], S[3, :], markersize = 25)
# for i = 1:size(M, 2)
#     p = M[:, i]
#     point = sphere_embedding(p)

#     GLMakie.arrows!(
#         tovec(point)...,
#         tovec(0.1*(ψz(point) .+ point))...;
#         arrowsize = 0.1,
#         color = :black,
#     )
#     # GLMakie.arrows!(
#     #     tovec(point)...,
#     #     tovec(0.01*ψy(point))...;
#     #     arrowsize = 0.1,
#     #     color = :red,
#     # )
#     # GLMakie.arrows!(
#     #     tovec(point)...,
#     #     tovec(0.01*ψx(point))...;
#     #     arrowsize = 0.1,
#     #     color = :green,
#     # )


# end
# fig
